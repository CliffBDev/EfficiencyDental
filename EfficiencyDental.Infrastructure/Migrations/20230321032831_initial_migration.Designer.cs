// <auto-generated />
using EfficiencyDental.Infrastructure.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EfficiencyDental.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20230321032831_initial_migration")]
    partial class initial_migration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EfficiencyDental.Domain.Entities.Office", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("PracticeId")
                        .HasColumnType("integer")
                        .HasColumnName("practice_id");

                    b.HasKey("Id")
                        .HasName("pk_office");

                    b.HasIndex("PracticeId")
                        .HasDatabaseName("ix_office_practice_id");

                    b.ToTable("office", (string)null);
                });

            modelBuilder.Entity("EfficiencyDental.Domain.Entities.Practice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_practices");

                    b.ToTable("practices", (string)null);
                });

            modelBuilder.Entity("EfficiencyDental.Domain.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("OfficeId")
                        .HasColumnType("integer")
                        .HasColumnName("office_id");

                    b.HasKey("Id")
                        .HasName("pk_room");

                    b.HasIndex("OfficeId")
                        .HasDatabaseName("ix_room_office_id");

                    b.ToTable("room", (string)null);
                });

            modelBuilder.Entity("EfficiencyDental.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("EmployeeNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("employee_number");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("user_type_id");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("UserTypeId")
                        .HasDatabaseName("ix_user_user_type_id");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("EfficiencyDental.Domain.Entities.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_user_type");

                    b.ToTable("user_type", (string)null);
                });

            modelBuilder.Entity("OfficeUser", b =>
                {
                    b.Property<int>("OfficesId")
                        .HasColumnType("integer")
                        .HasColumnName("offices_id");

                    b.Property<int>("UsersId")
                        .HasColumnType("integer")
                        .HasColumnName("users_id");

                    b.HasKey("OfficesId", "UsersId")
                        .HasName("pk_office_user");

                    b.HasIndex("UsersId")
                        .HasDatabaseName("ix_office_user_users_id");

                    b.ToTable("office_user", (string)null);
                });

            modelBuilder.Entity("EfficiencyDental.Domain.Entities.Office", b =>
                {
                    b.HasOne("EfficiencyDental.Domain.Entities.Practice", null)
                        .WithMany("Offices")
                        .HasForeignKey("PracticeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_office_practices_practice_id");
                });

            modelBuilder.Entity("EfficiencyDental.Domain.Entities.Room", b =>
                {
                    b.HasOne("EfficiencyDental.Domain.Entities.Office", null)
                        .WithMany("Rooms")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_room_office_office_id");
                });

            modelBuilder.Entity("EfficiencyDental.Domain.Entities.User", b =>
                {
                    b.HasOne("EfficiencyDental.Domain.Entities.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_user_type_user_type_id");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("OfficeUser", b =>
                {
                    b.HasOne("EfficiencyDental.Domain.Entities.Office", null)
                        .WithMany()
                        .HasForeignKey("OfficesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_office_user_office_offices_id");

                    b.HasOne("EfficiencyDental.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_office_user_user_users_id");
                });

            modelBuilder.Entity("EfficiencyDental.Domain.Entities.Office", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("EfficiencyDental.Domain.Entities.Practice", b =>
                {
                    b.Navigation("Offices");
                });
#pragma warning restore 612, 618
        }
    }
}
