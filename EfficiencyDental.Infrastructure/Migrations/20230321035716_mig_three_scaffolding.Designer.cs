// <auto-generated />
using System;
using EfficiencyDental.Infrastructure.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EfficiencyDental.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20230321035716_mig_three_scaffolding")]
    partial class mig_three_scaffolding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EfficiencyDental.Domain.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AppointmentStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("appointment_status_id");

                    b.Property<int>("AppointmentTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("appointment_type_id");

                    b.Property<int>("LengthInMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("length_in_minutes");

                    b.Property<int>("OfficeId")
                        .HasColumnType("integer")
                        .HasColumnName("office_id");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer")
                        .HasColumnName("patient_id");

                    b.Property<DateTime>("ProjectedEndTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("projected_end_time");

                    b.Property<int>("ProviderId")
                        .HasColumnType("integer")
                        .HasColumnName("provider_id");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer")
                        .HasColumnName("room_id");

                    b.Property<DateTime>("StartTimeUTC")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time_utc");

                    b.HasKey("Id")
                        .HasName("pk_appointments");

                    b.HasIndex("AppointmentStatusId")
                        .HasDatabaseName("ix_appointments_appointment_status_id");

                    b.HasIndex("AppointmentTypeId")
                        .HasDatabaseName("ix_appointments_appointment_type_id");

                    b.HasIndex("OfficeId")
                        .HasDatabaseName("ix_appointments_office_id");

                    b.HasIndex("PatientId")
                        .HasDatabaseName("ix_appointments_patient_id");

                    b.HasIndex("ProviderId")
                        .HasDatabaseName("ix_appointments_provider_id");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("ix_appointments_room_id");

                    b.ToTable("appointments", (string)null);
                });

            modelBuilder.Entity("EfficiencyDental.Domain.Entities.AppointmentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_appointment_statuses");

                    b.ToTable("appointment_statuses", (string)null);
                });

            modelBuilder.Entity("EfficiencyDental.Domain.Entities.AppointmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_appointment_types");

                    b.ToTable("appointment_types", (string)null);
                });

            modelBuilder.Entity("EfficiencyDental.Domain.Entities.Insurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_insurances");

                    b.ToTable("insurances", (string)null);
                });

            modelBuilder.Entity("EfficiencyDental.Domain.Entities.Office", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("PracticeId")
                        .HasColumnType("integer")
                        .HasColumnName("practice_id");

                    b.HasKey("Id")
                        .HasName("pk_offices");

                    b.HasIndex("PracticeId")
                        .HasDatabaseName("ix_offices_practice_id");

                    b.ToTable("offices", (string)null);
                });

            modelBuilder.Entity("EfficiencyDental.Domain.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<int>("InsuranceId")
                        .HasColumnType("integer")
                        .HasColumnName("insurance_id");

                    b.Property<bool>("Insured")
                        .HasColumnType("boolean")
                        .HasColumnName("insured");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("SocialSecurityNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("social_security_number");

                    b.HasKey("Id")
                        .HasName("pk_patients");

                    b.HasIndex("InsuranceId")
                        .HasDatabaseName("ix_patients_insurance_id");

                    b.ToTable("patients", (string)null);
                });

            modelBuilder.Entity("EfficiencyDental.Domain.Entities.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_positions");

                    b.ToTable("positions", (string)null);
                });

            modelBuilder.Entity("EfficiencyDental.Domain.Entities.Practice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_practices");

                    b.ToTable("practices", (string)null);
                });

            modelBuilder.Entity("EfficiencyDental.Domain.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("OfficeId")
                        .HasColumnType("integer")
                        .HasColumnName("office_id");

                    b.HasKey("Id")
                        .HasName("pk_rooms");

                    b.HasIndex("OfficeId")
                        .HasDatabaseName("ix_rooms_office_id");

                    b.ToTable("rooms", (string)null);
                });

            modelBuilder.Entity("EfficiencyDental.Domain.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("pk_services");

                    b.ToTable("services", (string)null);
                });

            modelBuilder.Entity("EfficiencyDental.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("integer")
                        .HasColumnName("appointment_id");

                    b.Property<string>("EmployeeNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("employee_number");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<int>("PositionId")
                        .HasColumnType("integer")
                        .HasColumnName("position_id");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("user_type_id");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("AppointmentId")
                        .HasDatabaseName("ix_users_appointment_id");

                    b.HasIndex("PositionId")
                        .HasDatabaseName("ix_users_position_id");

                    b.HasIndex("UserTypeId")
                        .HasDatabaseName("ix_users_user_type_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("EfficiencyDental.Domain.Entities.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_user_types");

                    b.ToTable("user_types", (string)null);
                });

            modelBuilder.Entity("OfficeUser", b =>
                {
                    b.Property<int>("OfficesId")
                        .HasColumnType("integer")
                        .HasColumnName("offices_id");

                    b.Property<int>("UsersId")
                        .HasColumnType("integer")
                        .HasColumnName("users_id");

                    b.HasKey("OfficesId", "UsersId")
                        .HasName("pk_office_user");

                    b.HasIndex("UsersId")
                        .HasDatabaseName("ix_office_user_users_id");

                    b.ToTable("office_user", (string)null);
                });

            modelBuilder.Entity("EfficiencyDental.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("EfficiencyDental.Domain.Entities.AppointmentStatus", "AppointmentStatus")
                        .WithMany()
                        .HasForeignKey("AppointmentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_appointments_appointment_statuses_appointment_status_id");

                    b.HasOne("EfficiencyDental.Domain.Entities.AppointmentType", "AppointmentType")
                        .WithMany()
                        .HasForeignKey("AppointmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_appointments_appointment_types_appointment_type_id");

                    b.HasOne("EfficiencyDental.Domain.Entities.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_appointments_offices_office_id");

                    b.HasOne("EfficiencyDental.Domain.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_appointments_patients_patient_id");

                    b.HasOne("EfficiencyDental.Domain.Entities.User", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_appointments_users_provider_id");

                    b.HasOne("EfficiencyDental.Domain.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_appointments_rooms_room_id");

                    b.Navigation("AppointmentStatus");

                    b.Navigation("AppointmentType");

                    b.Navigation("Office");

                    b.Navigation("Patient");

                    b.Navigation("Provider");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("EfficiencyDental.Domain.Entities.Office", b =>
                {
                    b.HasOne("EfficiencyDental.Domain.Entities.Practice", null)
                        .WithMany("Offices")
                        .HasForeignKey("PracticeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_offices_practices_practice_id");
                });

            modelBuilder.Entity("EfficiencyDental.Domain.Entities.Patient", b =>
                {
                    b.HasOne("EfficiencyDental.Domain.Entities.Insurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_patients_insurances_insurance_id");

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("EfficiencyDental.Domain.Entities.Room", b =>
                {
                    b.HasOne("EfficiencyDental.Domain.Entities.Office", null)
                        .WithMany("Rooms")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rooms_offices_office_id");
                });

            modelBuilder.Entity("EfficiencyDental.Domain.Entities.User", b =>
                {
                    b.HasOne("EfficiencyDental.Domain.Entities.Appointment", null)
                        .WithMany("MedicalStaff")
                        .HasForeignKey("AppointmentId")
                        .HasConstraintName("fk_users_appointments_appointment_id");

                    b.HasOne("EfficiencyDental.Domain.Entities.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_positions_position_id");

                    b.HasOne("EfficiencyDental.Domain.Entities.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_user_types_user_type_id");

                    b.Navigation("Position");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("OfficeUser", b =>
                {
                    b.HasOne("EfficiencyDental.Domain.Entities.Office", null)
                        .WithMany()
                        .HasForeignKey("OfficesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_office_user_offices_offices_id");

                    b.HasOne("EfficiencyDental.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_office_user_users_users_id");
                });

            modelBuilder.Entity("EfficiencyDental.Domain.Entities.Appointment", b =>
                {
                    b.Navigation("MedicalStaff");
                });

            modelBuilder.Entity("EfficiencyDental.Domain.Entities.Office", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("EfficiencyDental.Domain.Entities.Practice", b =>
                {
                    b.Navigation("Offices");
                });
#pragma warning restore 612, 618
        }
    }
}
